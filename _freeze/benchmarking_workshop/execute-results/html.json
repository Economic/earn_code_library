{
  "hash": "b4a6996472fe3fd7a523db764e38da40",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Benchmarking Data\"\nauthor: \"Jori Kandra\"\n---\n\n\n\n\nThis training was originally presented as a workshop at EARNCon 2023.\n\n[Benchmarking PowerPoint slides](https://github.com/Economic/earn_code_library/blob/main/supp_files/earncon2023_%20benchmarking_workshop.pdf)\n\n### Publication: [Older workers were devastated by the pandemic downturn and continue to face adverse employment outcomes](https://www.epi.org/publication/older-workers-were-devastated-by-the-pandemic-downturn-and-continue-to-face-adverse-employment-outcomes-epi-testimony-for-the-senate-special-committee-on-aging/)\n\n### import packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import packages\nlibrary(tidyverse)\nlibrary(epiextractr)\nlibrary(here)\n```\n:::\n\n\n\n\n### Define CPS years\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_years <- 2007:2020\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_vars <- c(\"year\", \"month\", \"age\", \"female\", \"emp\", \"basicwgt\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# import basic CPS data\ncps_data <- load_basic(cps_years, all_of(cps_vars)) %>% \n  # restrict to 16+\n  filter(age >= 16) %>% \n  # create age categories\n  mutate(age_group = case_when(\n    age <= 24 ~ \"16–24 years old\",\n    age >= 25 & age <= 54 ~ \"25–54 years old\",\n    age >= 55 & age <= 64 ~ \"55–64 years old\",\n    age >= 65 ~ \"65+ years old\"),\n    # adjust weight\n    wgt = basicwgt/12)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nUsing EPI CPS Basic Monthly Extracts, Version 2025.9.11\n```\n\n\n:::\n:::\n\n\n\n\n<https://www.bls.gov/cps/aa2020/cpsaat18b.htm>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data %>% \n  # restrict to employed\n  filter(emp == 1, year == 2020) %>% \n  # weighted employment count by year\n  group_by(year) %>% tally(wt = wgt) %>% mutate(n = n/1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n   year       n\n  <int>   <dbl>\n1  2020 147795.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# age category benchmark: https://www.bls.gov/cps/aa2020/cpsaat03.htm\ncps_data %>% \n  # restrict to employed\n  filter(emp == 1, year == 2020) %>% \n  # weighted employment count by year\n  group_by(year, age_group) %>% tally(wt = wgt) %>% mutate(n = n/1000) %>% \n  # reshape data\n  pivot_wider(id_cols = year, names_from = age_group, values_from = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n# Groups:   year [1]\n   year `16–24 years old` `25–54 years old` `55–64 years old` `65+ years old`\n  <int>             <dbl>             <dbl>             <dbl>           <dbl>\n1  2020            17192.            95310.            25469.           9824.\n```\n\n\n:::\n:::\n\n\n\n\n### Figure C: change in employment-to-population ratio across age categories\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemp <- cps_data %>%\n  # isolate recession beginning and end years\n  filter(!is.na(emp),\n      year %in% c(2007, 2011, 2019, 2020)) %>% \n  # weighted employment * population count by year and age group\n  group_by(year, age_group) %>% summarise(emp = sum(emp * wgt), pop = sum(wgt)) %>% \n  # calculate EPOPs\n  mutate(epop = emp/pop) %>% pivot_wider(id_cols = age_group, names_from = year, values_from = epop) %>% \n  # calculate percent change in EPOPs\n  transmute(age_group = age_group, `2007–2011` = `2011`-`2007`, `2019–2020` = `2020`-`2019`) %>%\n  # output to output folder\n  write_csv(here(\"output/older_worker_epop.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n\n\nFigure D: Change in employment-population ratios during the Great Recession and the COVID-19 recession, 2007--2011 and 2019--2020, by gender and older age group\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nepop_gender <- cps_data %>% \n  # isolate recession beginning and end years\n  filter(!is.na(emp),\n      year %in% c(2007, 2011, 2019, 2020)) %>% \n  # assign value of female as character label (\"Female\" instead of 1 and \"Male\" instead of 0)\n  #note: requires the installation of haven\n  #note: using double \":\" is a way of referencing functions in a package without importing entire package\n  mutate(female = as.character(haven::as_factor(female))) %>% \n  # weighted employment * population count by year and age group AND female\n  group_by(year, age_group, female) %>% summarise(emp = sum(emp * wgt), pop = sum(wgt)) %>% \n  # calculate epops\n  mutate(epop = emp/pop) %>% ungroup() %>% \n  # reshape wider to calculate change in EPOPs over recession time perios\n  pivot_wider(id_cols = c(\"age_group\", \"female\"), names_from = year, values_from = epop) %>% \n  # calculate percent change in EPOPs\n  transmute(age_group = age_group, female = female, \n            `2007-2011` = `2011` - `2007`, `2019-2020` = `2020` - `2019`) %>% \n  # reshape data longer for ggplot2\n  #note: change in epop by age group will group bars by recession time period, create panels by gender,\n  #       reshape long for each dimension\n  pivot_longer(cols = c(`2007-2011`, `2019-2020`), names_to = \"recession\", values_to = \"epop_change\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'year', 'age_group'. You can override using\nthe `.groups` argument.\n```\n\n\n:::\n:::\n\n\n\n\n### Create mock of Figure D using ggplot2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# change in epop by age group and recession time periods\nggplot(epop_gender, aes(x = age_group, y = epop_change, fill = recession)) +\n  # use position \"dodge\" to group bars instead of stacking\n  geom_col(position = \"dodge\") +\n  # use to create side-by-side panels for easier viewing\n  facet_wrap(~female)\n```\n\n::: {.cell-output-display}\n![](benchmarking_workshop_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::",
    "supporting": [
      "benchmarking_workshop_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}