{
  "hash": "d2c08b99b983dc89a873ae967f4accde",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using ipumsr to load immigrant statistics\"\nauthor: \"Daniel Perez and Emma Cohn\"\nformat: html\neditor: visual\n---\n\n\n\n\nThe following chunk of code loads the R libraries necessary for this exercise. You may need to install them to run this code.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Load necessary libraries\nlibrary(tidyverse)\nlibrary(ipumsr)\nlibrary(janitor)\nlibrary(labelled)\nlibrary(fs)\n```\n:::\n\n\n\n\n## Create and clean an extract using IPUMSR.\n\n*You must set up an IPUMS API key before using the ipumsr package. For instructions on how to set up the IPUMS API, see \"[Introduction to the IPUMS API for R Users](http://cran.r-project.org/web/packages/ipumsr/vignettes/ipums-api.html).\"*\n\nFor guidance on how to define an extract, see \"[Microdata API Requests](https://cran.r-project.org/web/packages/ipumsr/vignettes/ipums-api-micro.html).\" You can view the list available IPUMS ACS samples and their IDs on the [IPUMS sample IDs page](https://usa.ipums.org/usa-action/samples/sample_ids).\n\n**Note:** You only need to run `define_extract_micro()` once, unless your extract parameters (e.g., years or variables) change. This command triggers an IPUMS API call, which may take several minutes depending on the extract size. If running this as part of a larger script, comment out this command to avoid repeated downloads.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load samples\nacs_samps <- ipumsr::get_sample_info('usa')\n\n# Create a vector of sample IDs to load\nyears <- c('us2000a', 'us2001a', 'us2002a', 'us2003a', 'us2004a', 'us2005a',\n           'us2006a', 'us2007a', 'us2008a', 'us2009a', 'us2010a', 'us2011a',\n           'us2012a', 'us2013a', 'us2014a', 'us2015a', 'us2016a', 'us2017a',\n           'us2018a', 'us2019a', 'us2020a', 'us2021a', 'us2022a', 'us2023a')\n\nacs_extr <- define_extract_micro(\n  \"usa\",\n  description = 'ACS extract for Immigration statistics',\n  samples = years,\n  # Select the variables to load\n  variables = list('STATEFIP','COUNTYFIP', 'SEX', 'AGE', 'RACE', 'HISPAN',\n                   'BPL', 'CITIZEN', 'YRNATUR', 'YRIMMIG', 'YRSUSA1',\n                   'LANGUAGE', 'EMPSTAT', 'LABFORCE', 'OCC', 'IND')) |> \n  submit_extract() |> \n  wait_for_extract()\n\n# Download extract to input folder\ndl_extr <- download_extract(extract = acs_extr,\n                                      download_dir = 'input/',\n                                      overwrite = TRUE)\n```\n:::\n\n\n\n\nLoad the extract (the xml file) and clean it up before conducting analysis.\n\n**Note:** Your extract will likely have a different file name, double-check this and update the script accordingly before running the following chunk.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# NOTE: Your project directory and xml file may look different!\nacs_raw <- read_ipums_micro(ddi = 'input/usa_00010.xml')\n\nacs <- acs_raw |> \n  # Use the janitor library to clean up names\n  janitor::clean_names() |> \n  # Use labelled library to create custom value labels\n  # relabel citizen=0 to \"Not foreign born\" per https://usa.ipums.org/usa-action/variables/CITIZEN#comparability_section\n  labelled::set_value_labels(citizen = c('Not foreign born'=0, 'Born abroad of American parents'=1, 'Naturalized citizen'=2, 'Not a citizen'=3)) |> \n  mutate(nativity = case_when(citizen %in% c(0,1) ~ 1,\n                              citizen %in% c(2,3) ~ 2)) |> \n  add_value_labels(nativity = c('Native' = 1, 'Foreign-born'=2))\n```\n:::\n\n\n\n\n## Benchmark your data\n\nRun a US population benchmark using the Census ACS table statistics to check your data before continuing.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Do your US population estimates benchmark with the Census ACS table statistics?\n#   https://data.census.gov/table/ACSDP1Y2023.DP05?q=DP05:+ACS+Demographic+and+Housing+Estimates\n\nus_pop <- acs |> \nsummarize(pop = sum(perwt, na.rm=TRUE),\n          .by=year)\n\nus_pop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24 × 2\n    year       pop\n   <int>     <dbl>\n 1  2000 281421906\n 2  2001 277075792\n 3  2002 280717370\n 4  2003 283051379\n 5  2004 285674993\n 6  2005 288398819\n 7  2006 299398485\n 8  2007 301621159\n 9  2008 304059728\n10  2009 307006556\n# ℹ 14 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Run your analysis!\n\nHere you will run your analysis to find three statistics:\n\n1.  Population by citizenship status and year\n2.  Population count and share by nativity and year\n3.  Employment counts and shares of immigrant workers by industry (See a list of industry codes and their associated titles [here](https://usa.ipums.org/usa/volii/ind2022.shtml))\n\nDon't forget to update the code to match your selection of years.\n\nThis code can also be easily altered to filter for specific groups. For example, you can filter by state, specific industry, or for prime-age workers. See the commented-out commands for examples. Be sure to check for viable sample sizes when using a smaller data set.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Population by citizenship status and year 2000–2023\nforeign_born_total <- acs |> \n  ## filter to just North Carolina\n  # filter(statefip == 37) |>\n  mutate(citizen = to_factor(citizen)) |> \n  summarize(pop = sum(perwt, na.rm=TRUE),\n            .by=c(year, citizen)) |> \n  pivot_wider(id_cols = year, names_from = citizen, values_from = pop)\n\nforeign_born_total\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24 × 5\n    year `Not foreign born` `Not a citizen` `Naturalized citizen`\n   <int>              <dbl>           <dbl>                 <dbl>\n 1  2000          248371297        18599549              12533932\n 2  2001          243578016        18804708              12743420\n 3  2002          245639288        19565399              13530751\n 4  2003          247351604        19749916              13917762\n 5  2004          249429239        19857656              14400045\n 6  2005          250569155        20836032              14933571\n 7  2006          259759423        21696303              15773084\n 8  2007          261446898        21843559              16204897\n 9  2008          263619759        21685745              16330357\n10  2009          266132797        21640993              16811829\n# ℹ 14 more rows\n# ℹ 1 more variable: `Born abroad of American parents` <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Population by nativity and year 2000–2023\nnativity <- acs |> \n  mutate(nativity = to_factor(nativity)) |> \n  summarize(pop = sum(perwt, na.rm=TRUE),\n            .by=c(year, nativity)) |>\n  mutate(share = pop/sum(pop), .by=year) |> \n  pivot_wider(id_cols = year, names_from = nativity, values_from = c(pop, share))\n\nnativity\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24 × 5\n    year pop_Native `pop_Foreign-born` share_Native `share_Foreign-born`\n   <int>      <dbl>              <dbl>        <dbl>                <dbl>\n 1  2000  250288425           31133481        0.889                0.111\n 2  2001  245527664           31548128        0.886                0.114\n 3  2002  247621220           33096150        0.882                0.118\n 4  2003  249383701           33667678        0.881                0.119\n 5  2004  251417292           34257701        0.880                0.120\n 6  2005  252629216           35769603        0.876                0.124\n 7  2006  261929098           37469387        0.875                0.125\n 8  2007  263572703           38048456        0.874                0.126\n 9  2008  266043626           38016102        0.875                0.125\n10  2009  268553734           38452822        0.875                0.125\n# ℹ 14 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# Industries and occupations of immigrant workers\n# This analysis pools 5 years of data\nnativity_ind <- acs |> \n  filter(year %in% c(2019:2023), age>=16, empstat==1) |> \n  ## filter for prime-age EPOP\n  # filter(age >= 25 & age <= 54) |>\n  mutate(nativity = to_factor(nativity)) |> \n  # Adjust perwt, dividing it by 5.\n  summarize(total_emp = sum(empstat * perwt/5, na.rm=TRUE),\n            n=n(),\n            .by=c(nativity, ind)) |>\n  mutate(share = total_emp/sum(total_emp), .by=nativity) |> \n  pivot_wider(id_cols = ind, names_from = nativity, values_from = c(total_emp, share, n))\n\nnativity_ind\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 302 × 7\n   ind       total_emp_Native `total_emp_Foreign-born` share_Native\n   <int+lbl>            <dbl>                    <dbl>        <dbl>\n 1 9160              1018174.                  128856.     0.00767 \n 2 5170               682919                   139648.     0.00514 \n 3 7870              3681723.                  803696.     0.0277  \n 4 5570               100653                    15650.     0.000758\n 5 6480               135431                    17229.     0.00102 \n 6 3291               667545                   118284      0.00503 \n 7 8680              7329304.                 1796732.     0.0552  \n 8 9670               401908                    34028.     0.00303 \n 9 5391              1614827.                  217887.     0.0122  \n10 5490               176175                    27847      0.00133 \n# ℹ 292 more rows\n# ℹ 3 more variables: `share_Foreign-born` <dbl>, n_Native <int>,\n#   `n_Foreign-born` <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n# See a list of industry codes and their associated titles here: https://usa.ipums.org/usa/volii/ind2022.shtml\n```\n:::\n\n\n\n\nHappy coding!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}