{
  "hash": "d6978e467e5919989214c3fe35864402",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Weighted percentiles\"\nauthor: \"Ben Zipperer\"\nformat: html\n---\n\n\n\n\nThis script uses Current Population Survey (CPS) microdata [extracts](https://microdata.epi.org/) to calculate sample weighted wage percentiles over time.\n\n## Preliminaries\n\nFirst, load the required packages:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(MetricsWeighted)\nlibrary(epiextractr)\n```\n:::\n\n\n\n\nThen grab wage earner observations from the 1979-2022 CPS ORG data using [epiextractr](epi_microdata.qmd). If necessary, use the .extracts_dir argument of `load_org()` to point it to your downloaded CPS extracts.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data <- epiextractr::load_org(1979:2022, year, orgwgt, wage) %>% \n  filter(wage > 0)\n```\n:::\n\n\n\n\n## Goal and quick solution\n\nLet's calculate the 10th, 50th, and 90th wage percentiles for each year, where these will be sample weighted percentiles using the `orgwgt` variable as the weight.\n\nFirst I'll show you how you might do that and then I'll break it down step-by-step.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# percentiles of interest\np <- c(10, 50, 90)\n\n# calculate percentiles\ncps_data %>% \n  reframe(\n    percentile = p, \n    value = weighted_quantile(wage, w = orgwgt, probs = p / 100),\n    .by = year\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 132 × 3\n    year percentile value\n   <int>      <dbl> <dbl>\n 1  1979         10  2.90\n 2  1979         50  5   \n 3  1979         90 10.1 \n 4  1980         10  3.10\n 5  1980         50  5.62\n 6  1980         90 11.2 \n 7  1981         10  3.35\n 8  1981         50  6.05\n 9  1981         90 12.5 \n10  1982         10  3.35\n# ℹ 122 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Step-by-step explanation\n\nA simple version of this problem would be to calculate the median wage in 2022.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data %>% \n  filter(year == 2022) %>% \n  summarize(p_50 = median(wage))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   p_50\n  <dbl>\n1    23\n```\n\n\n:::\n:::\n\n\n\n\nUse `weighted_median()` from the `MetricsWeighted` package to calculate a sample-weighted median.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data %>% \n  filter(year == 2022) %>% \n  summarize(p_50 = weighted_median(wage, w = orgwgt))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   p_50\n  <dbl>\n1  22.9\n```\n\n\n:::\n:::\n\n\n\n\nUse `weighted_quantile()` and the `probs` argument to calculate any weighted percentile. Note that probs ranges from 0 to 1.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data %>% \n  filter(year == 2022) %>% \n  summarize(p_10 = weighted_quantile(wage, w = orgwgt, probs = 0.10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   p_10\n  <dbl>\n1  12.5\n```\n\n\n:::\n:::\n\n\n\n\nTo calculate multiple percentiles provide, provide a vector of percentiles and also switch from `summarize()` to `reframe()` to allow multiple rows of results, as opposed to a single summary row.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- c(10, 50, 90)\n\ncps_data %>% \n  filter(year == 2022) %>% \n  reframe(\n    percentile = p, \n    value = weighted_quantile(wage, w = orgwgt, probs = p / 100)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  percentile value\n       <dbl> <dbl>\n1         10  12.5\n2         50  22.9\n3         90  57.7\n```\n\n\n:::\n:::\n\n\n\n\nNotice how we used `probs = p / 100` in the arguments to `weighted_quantile()`.\n\nFinally, to calculate percentiles for each year, we can use the .by argument of reframe.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data %>% \n  reframe(\n    percentile = p, \n    value = weighted_quantile(wage, w = orgwgt, probs = p / 100),\n    .by = year\n  ) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 132 × 3\n    year percentile value\n   <int>      <dbl> <dbl>\n 1  1979         10  2.90\n 2  1979         50  5   \n 3  1979         90 10.1 \n 4  1980         10  3.10\n 5  1980         50  5.62\n 6  1980         90 11.2 \n 7  1981         10  3.35\n 8  1981         50  6.05\n 9  1981         90 12.5 \n10  1982         10  3.35\n# ℹ 122 more rows\n```\n\n\n:::\n:::\n\n\n\n\nObserve the shape of the resulting output dataset: it is long in both years and percentiles. Long data like this is useful for more data manipulation or for making plots.\n\nFor example, suppose you wanted to plot nominal wage growth since 2000.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# construct the percentiles in long format\npercentile_data <- cps_data %>% \n  reframe(\n    percentile = p, \n    value = weighted_quantile(wage, w = orgwgt, probs = p / 100),\n    .by = year\n  )\n\n# grab the 2000 base values\nbase_values <- percentile_data %>% \n  filter(year == 2000) %>% \n  select(percentile, base_value = value)\n\npercentile_data %>% \n  filter(year >= 2000) %>% \n  full_join(base_values, by = \"percentile\") %>% \n  mutate(\n    wage_growth = value / base_value - 1,\n    percentile = paste0(percentile, \"th percentile\")\n  ) %>% \n  ggplot(aes(x = year, y = wage_growth, color = percentile)) + \n  geom_line() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](weighted_percentiles_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nWhile long data like that is useful for additional analysis, if you need to see more of the data at once, like for a table, you might want to make the data wider. With `pivot_wider()` you can reshape the data so that it is long in years and wide in percentiles.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data %>%\n  reframe(\n    percentile = p,\n    value = weighted_quantile(wage, w = orgwgt, probs = p / 100),\n    .by = year\n  ) %>%\n  pivot_wider(id_cols = year, names_from = percentile, values_from = value)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 44 × 4\n    year  `10`  `50`  `90`\n   <int> <dbl> <dbl> <dbl>\n 1  1979  2.90  5     10.1\n 2  1980  3.10  5.62  11.2\n 3  1981  3.35  6.05  12.5\n 4  1982  3.35  6.5   13.1\n 5  1983  3.40  6.70  14  \n 6  1984  3.5   7     15.0\n 7  1985  3.5   7.47  15  \n 8  1986  3.60  7.5   16  \n 9  1987  3.75  8     16.8\n10  1988  4     8.02  17.5\n# ℹ 34 more rows\n```\n\n\n:::\n:::\n\n\n\n\nOf course, the column names are pretty ugly. You could add a \"th\" to the column names from the get-go.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data %>%\n  reframe(\n    percentile = paste0(p, \"th\"),\n    value = weighted_quantile(wage, w = orgwgt, probs = p / 100),\n    .by = year\n  ) %>%\n  pivot_wider(id_cols = year, names_from = percentile, values_from = value)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 44 × 4\n    year `10th` `50th` `90th`\n   <int>  <dbl>  <dbl>  <dbl>\n 1  1979   2.90   5      10.1\n 2  1980   3.10   5.62   11.2\n 3  1981   3.35   6.05   12.5\n 4  1982   3.35   6.5    13.1\n 5  1983   3.40   6.70   14  \n 6  1984   3.5    7      15.0\n 7  1985   3.5    7.47   15  \n 8  1986   3.60   7.5    16  \n 9  1987   3.75   8      16.8\n10  1988   4      8.02   17.5\n# ℹ 34 more rows\n```\n\n\n:::\n:::\n\n\n\n\nOr you could make the column names more data analysis friendly with a \"p\\_\" prefix.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data %>%\n  reframe(\n    percentile = p,\n    value = weighted_quantile(wage, w = orgwgt, probs = p / 100),\n    .by = year\n  ) %>%\n  pivot_wider(\n    id_cols = year,\n    names_from = percentile,\n    values_from = value,\n    names_prefix = \"p_\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 44 × 4\n    year  p_10  p_50  p_90\n   <int> <dbl> <dbl> <dbl>\n 1  1979  2.90  5     10.1\n 2  1980  3.10  5.62  11.2\n 3  1981  3.35  6.05  12.5\n 4  1982  3.35  6.5   13.1\n 5  1983  3.40  6.70  14  \n 6  1984  3.5   7     15.0\n 7  1985  3.5   7.47  15  \n 8  1986  3.60  7.5   16  \n 9  1987  3.75  8     16.8\n10  1988  4     8.02  17.5\n# ℹ 34 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Extra credit\n\nConsider the concise code\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncps_data %>%\n  reframe(\n    name = p,\n    value = weighted_quantile(wage, w = orgwgt, probs = p / 100),\n    .by = year\n  ) %>%\n  pivot_wider(id_cols = year, names_prefix = \"p_\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 44 × 4\n    year  p_10  p_50  p_90\n   <int> <dbl> <dbl> <dbl>\n 1  1979  2.90  5     10.1\n 2  1980  3.10  5.62  11.2\n 3  1981  3.35  6.05  12.5\n 4  1982  3.35  6.5   13.1\n 5  1983  3.40  6.70  14  \n 6  1984  3.5   7     15.0\n 7  1985  3.5   7.47  15  \n 8  1986  3.60  7.5   16  \n 9  1987  3.75  8     16.8\n10  1988  4     8.02  17.5\n# ℹ 34 more rows\n```\n\n\n:::\n:::\n\n\n\n\nWhy does it produce the same results as the longer code above?\n",
    "supporting": [
      "weighted_percentiles_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}