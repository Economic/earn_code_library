{
  "hash": "74585e531b2c93689680e59d5b82287f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Downloading BLS data via blsR\"\nauthor: \"Jori Kandra\"\n---\n\n\n\n\n\n\n## Loading blsR and setting API key\n\nblsR is the R package written and maintained by the Bureau of Labor Statistics to provide users with BLS data, including Current Employment Statistics (CES), Worker characteristics data (CPS), inflation & prices (CPI), and Job Openings Layoff and Turnover Survey (JOLTS), among others.\n\nBLS provides this data through the use of an Application Programming Interface (API), which allows R to directly import data from BLS using the series IDs which are extensively documented by BLS. This process automates the manual retrieval of data using the BLS series report and delivers the tidied data.\n\nThe following chunk of code loads the R libraries necessary for this exercise. You may need to install them to run this code.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# download blsR\n#install.library(\"blsR\")\n\n# import relevant libraries\nlibrary(tidyverse)\nlibrary(blsR)\nlibrary(here)\n```\n:::\n\n\n\n\nIn order to access BLS data you must register for a unique API key. Save your key as an environmental object to be used later.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set key for BLS api\n#note: each user must register for unique BLS API key here: https://www.bls.gov/developers/home.htm\nbls_key <- Sys.getenv(\"your-key-goes-here\")\n```\n:::\n\n\n\n\n## Nominal average hourly earnings of production and non-supervisory employees\n\nYou can import a single table using the blsR::get_n_series_table() function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## use blsR to pull in nominal wages\nnominal_wages <- get_n_series_table(series = \"CEU0500000008\", api_key = bls_key, \n                                    start_year = 1965, end_year = 2023, \n                                    tidy = TRUE, annualaverage = TRUE) %>% \n  # filter for annual data\n  filter(month == 13)\n```\n:::\n\n\n\n\n## Real average hourly earnings of production and non-supervsory employees\n\nYou can also import multiple series at once. For example, we can import AHE and CPI in order to calculate real wages.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set cpi codes\ncpi_codes <- c(\"CUUR0000SA0\",\n               \"CEU0500000008\")\n\n# set cpi base\n#note: used to set base year for inflation-adjustment\ncpi_base <- get_n_series_table(series_ids = \"CUUR0000SA0\", start_year = 2023, end_year = 2023, \n                               api_key = bls_key, tidy = TRUE, annualaverage = TRUE) %>% \n  # filter annual 2023 data and pull CPI value as base\n  filter(month == 13) %>% pull(CUUR0000SA0)\n\n# use blsR to pull CPI data\ncpi_output <- get_n_series_table(series_ids = cpi_codes, start_year = 1947, end_year = 2023, \n                                 api_key = bls_key, tidy = TRUE, annualaverage = TRUE) %>% \n  # filter annual data\n  filter(month == 13) %>%\n  # rename for easier handling\n  rename(ahe = CEU0500000008, cpi = CUUR0000SA0) %>% \n  # calculate real wages\n  mutate(ahe_real = ahe * (cpi_base/cpi)) %>% \n  # export to delimited file\n  write.csv(here(\"ahe_real.csv\"))\n```\n:::\n\n\n\n\n## Pulling more than 50 series\n\nThe BLS API limits each call to 50 series, which can be limiting when you are trying to pull in large datasets. Here is a trick I use in the code that runs our Jobs and Unemployment page to workaround this limitation:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in bls series codes\n#note: this is a random selection of codes used in our Jobs and Unemployment figures\nbls_codes <- read.csv(here(\"bls_codes.csv\"))\n# remove any blanks\nbls_codes <- bls_codes$series_id[bls_codes$series_id != \"\"]\n\n\n# use map to iteratively call blsR api at max number of series id\n#note: BLS restricts to max 50 series in a single call\njobs_day_df <- map(split(bls_codes, ceiling(seq_along(bls_codes) / 50)), # split codes into groups of 50\n             # call blsR using series ids sliced into groups of 50\n             ~ get_n_series_table(series_ids = .x, start_year = 1939, end_year = 2023, \n                                  api_key = bls_key, tidy = TRUE)) %>% \n  # map returns list, flatten by joining data\n  reduce(., function(df1, df2) full_join(df1, df2, by = c(\"year\", \"month\"))) %>%\n  # define date\n  mutate(date = as.POSIXct(paste(year,month,1, sep = \"-\")),\n         date = as.Date(date)) %>% \n  write_csv(here(\"jobs_day_example.csv\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}