---
title: "Visualization workshop 2023"
---

## Welcome to the EARNCon 2023 Visualization workshop page

In this workshop you will learn how to create data visualizations using free tools like ggplot2 and Tableau.

## 1. Introduction

### 1.1 Brief overview of `ggplot2`

<!-- speaker notes -->

```{=html}
<!--
`ggplot2` is highly regarded in the R community because of its flexibility. Base R graphics have their own merits, but `ggplot2` stands out by offering a more structured way to visualize data.
Many of the visualizations seen in scientific journals and professional reports use `ggplot2` because its capable of producing publication-quality graphics with few steps.
-->
```
`ggplot2` is a data visualization package for R that allows users to create complex plots in a structured manner. It's based on the Grammar of Graphics, which provides a coherent system for describing and building graphics.

### 1.2 Philosophy behind ggplot2

<!-- speaker notes -->

```{=html}
<!--
The Grammar of Graphics [Book], written by Leland Wilkinson, serves as the foundation for `ggplot2`.
Note: Leland Wilkinson, was VP of Statistics for Tableau before his passing.
Visualizing a plot in `ggplot2` is about understanding its layers. Starting from the data, we layer on aesthetics, and geometries [lines, bars, points, etc.]. 
This structured layer-wise approach makes constructing and then iterating on charts, clear and intuitive.
-->
```
At the core of `ggplot2` is the idea of layers. This means starting with a blank canvas and then iteratively adding layers to create the desired visualization.

## 2. Basic chart creation

### 2.1. Basic syntax: The Big Three

<!-- speaker notes -->

```{=html}
<!--
- `ggplot2` functions can be broken down intuitively:
  - `ggplot()`: Initiates the canvas and data setup.
  - `aes()`: Designates which columns of our data map to specific visual properties, such as x and y axes.
  - Geometries (e.g., `geom_point()`): Dictate the type of plot, be it a scatter plot, line plot, bar plot, etc.
- Using this approach is like saying: "With this data, using these columns for these aesthetics, render this specific type of plot."
-->
```
1.  `ggplot()`
2.  `aes()`
3.  [geom_point()](https://ggplot2.tidyverse.org/reference/index.html#geoms)

The foundation of any `ggplot2` visualization starts with the `ggplot()` function. Within `ggplot()`, we call `aes()` to designate aesthetic mappings, and then append geometries like `geom_point()` to visually represent data points.

### 2.2. Practical example

<!-- speaker notes -->

```{=html}
<!--
We'll now delve into the `mtcars` dataset, a default R dataset, which showcases diverse attributes of cars. - A common relationship to explore is deciphering how the horsepower (`hp`) of a car impacts its fuel efficiency, measured as miles per gallon (`mpg`). - Plotting these variables against each other facilitates a visual assessment of their relationship, enabling preliminary insights.
-->
```
Using the **`mtcars`** dataset, we'll illustrate the relationship between a car's horsepower (**`hp`**) and its fuel efficiency (**`mpg`**).

```{r Load gg and mtcars, message=FALSE}
#Load tidyverse library
library(tidyverse)
library(here)

mtcars <- mtcars
```

```{r Car scatter}
# A simple scatter
ggplot(data = mtcars, aes(x=mpg, y=hp)) +
  geom_point()
```

```{r Histogram}
ggplot(mtcars, aes(x=mpg)) + 
  geom_histogram(binwidth=3)
```

\-**Note**: All code will live on code library

## 3. Adding layers and customizations

<!-- speaker notes -->

```{=html}
<!--

First thing first, we'll load some pre-tabulated data directly from github page.
It contains variables on employment, union density, and wages by industry. Stuff we commonly work with.
-->
```

```{r Industry data}

# Load some data from Github. 
# Major industries, union density, real median wages, and employment. 2000 to 2022
# ind_data <- read.csv(url('https://raw.githubusercontent.com/Economic/earn_code_library/main/data/industry_union_wage_emp.csv'))

ind_data <- read_csv(file = here('data/industry_union_wage_emp.csv'), col_names = TRUE)

#Keep 2022 data
ind_data2022 <- ind_data %>%  
  filter(year==2022)

ggplot(ind_data2022, aes(x=union_density, y=real_med_wage)) +
  geom_point()
```
### 3.1 Adding geometries

<!-- speaker notes -->

```{=html}
<!--
- With `ggplot2`, combining different geometries and aesthetic customizations can really elevate a chart.
- For example, on a scatter geometry, we can transpose "smooth" geometry `geom_smooth()` in the form of a regression line. 
--[Run example at this point]
--In this case, adding a secondary geometry gives us a visual diagnostic, that allows us to examine the data for patterns and relationships .
-->
```

An insightful visualization often arises from combining various layers and customizing aesthetics.

Building on our scatter plot from earlier, let's include a smoothed line to better discern the relationship between mpg and hp:

```{r Ind lm plot}

ggplot(data=ind_data2022, aes(x=union_density, y=real_med_wage)) +
  geom_point() +
  # Add a smoothed line with customized aesthetics
  geom_smooth(method = 'lm', se = FALSE, col = "red")
```
The geom_smooth() with method="lm" adds a linear regression line. The se=FALSE ensures the standard error bands are not plotted, and we've chosen a distinct red color for the line.

### 3.2 Customizing Aesthetics

<!-- speaker notes -->

```{=html}
<!--
- In addition to layering geometries, `ggplot2` lets us customize the visual properties of charts fairly extensively.
- Specifically, we can adjust the colors, sizes, shapes, and transparencies of the objects in our plot
-->
```

A major advantage of ggplot2 is its flexibility in customizing visual properties of your plots.

For instance, modifying the scatter plot by adjusting point properties:

```{r Ind aesthetics}

#Line chart with colors
ggplot(data=ind_data, aes(x=year, y=union_density, color=mind16)) +
  geom_line()

#Bar chart with colors
ggplot(data=ind_data2022, aes(x=mind16, y=real_med_wage, fill=mind16))+
  geom_col()

#Bubble scatter chart
ggplot(ind_data2022, aes(x=union_density, y=real_med_wage, size=(total_emp/1000))) + 
  geom_point()

#Bubble color scatter chart
ggplot(ind_data2022, aes(x=union_density, y=real_med_wage, color=mind16, size=(total_emp/1000))) + 
  geom_point()
```

Layering and customization in ggplot2 ensures your visualizations are both visually appealing and insightful.

## 4. Customizing Plots with labels and themes

### 4.1. Labeling and Titling

<!-- speaker notes -->

```{=html}
<!--
- Labeling plots is essential part communicating your data. Titles, axis labels, and legends provide the crucial context, and allow your chart to stand alone.
- `ggplot2` can sometimes infer some labels from the data, but it's typically best practice to customize them for clarity and presentation.
-->
```

Labeling is an integral part of making your plots interpretable. While some labels are inferred directly from the data, you often need to specify or customize them.

Here's how to add a title, x-axis label, and y-axis label to our scatter plot with the `labs()` function:

```{r Labeling}

ggplot(ind_data2022, aes(x=union_density, y=real_med_wage, color=mind16, size=(total_emp/1000))) + 
  geom_point() +
  labs(title = 'Relationship between union density and industry median wage, 2022',
       x = 'Union density',
       y = 'Real median wage',
       color= 'Industry',
       size = 'Total emp (1000s)')

```

### 4.2. Adjusting Text Elements

<!-- speaker notes -->

```{=html}
<!--
- Text elements (like axis labels, titles, and plot text) can be adjusted in terms of size, color, and font.
- Consistent and readable text ensures your plots are easily understandable and can enhance overall aesthetics.
-->
```

Text elements such as titles, axis labels, and annotations can be modified to better fit your plot's aesthetic or to match specific publication requirements.

Here's an example of adjusting the title's size and color:

Note:

```{r Text elements}

ggplot(ind_data2022, aes(x=union_density, y=real_med_wage, color=mind16, size=(total_emp/1000))) + 
  geom_point() +
  labs(title = 'Relationship between union density and industry median wage, 2022',
       x = 'Union density',
       y = 'Real median wage',
       color= 'Industry',
       size = 'Total emp (1000s)') +
  #fix our ugly legend!
  theme(legend.position = "bottom",
        legend.box = "vertical",
        legend.text = element_text(size = 6),
        legend.title = element_text(size=6))+
  
  guides(size = guide_legend(order=2),
         color = guide_legend(order=1)) +
  theme(plot.title = element_text(size=12, color='red', face='italic')) +
  
  # Create a taller plot
  theme(aspect.ratio = .25)

ggplot(mtcars, aes(x=mpg, y=hp)) + 
  geom_point() + 
  
  labs(title = "Relationship between MPG and Horsepower") +
  theme(plot.title = element_text(size=14, color='blue', face = 'italic'))+
  theme(aspect.ratio = .5)


# Note: Add some Hex code examples

```
### 4.3. Themes in `ggplot2`

<!-- speaker notes -->

```{=html}
<!--
- `ggplot2` lets us easily polish the appearance of plots with themes.
- There are many ready-made themes you can pick from, you can modify existing ones, and you can create your own presets.
- This is especially cool if your organization has a design standard manual, color schemes or logos you regularly use
-->
```

`ggplot2` offers pre-set themes to modify plot aesthetics. Themes are a quick way to change the overall appearance of a plot, ensuring consistency presentations, papers, or reports.

For instance, let's take the scatter plot we've been working with and apply a black and white theme:

```{r applying themes}

ggplot(ind_data2022, aes(x=union_density, y=real_med_wage, color=mind16, size=(total_emp/1000))) + 
  geom_point() +
  labs(title = 'Relationship between union density and industry median wage, 2022',
       x = 'Union density',
       y = 'Real median wage',
       color= 'Industry',
       size = 'Total emp (1000s)') +
  #Note: Every subsequent theme() will supersede the previous. So be mindful!
  # theme_bw() +
  # theme_dark() +
  theme_light()+
  #fix our ugly legend!
  theme(legend.position = "bottom",
        legend.box = "vertical",
        legend.text = element_text(size = 6),
        legend.title = element_text(size=6),
        plot.margin = unit(c(1,2,1,1), 'cm'))+
  #change order of legends
  guides(size = guide_legend(order=2),
         color = guide_legend(order=1)) +
  #change theme and color of chart
  theme(plot.title = element_text(size=12, color='red', face='italic'))

```

Using pre-made theme. [ThemePark](https://github.com/MatthewBJane/ThemePark) by Matthew B. Jane

```{r Installing themes}
## install.packages("remotes")
# remotes::install_github("MatthewBJane/ThemePark")

library(ThemePark)

themepark_themes
```

```{r applying ThemePark themes}

ggplot(ind_data2022, aes(x=union_density, y=real_med_wage, color=mind16, size=(total_emp/1000))) + 
  geom_point() +
  labs(title = 'Relationship between union density and industry median wage, 2022',
       x = 'Union density',
       y = 'Real median wage',
       color= 'Industry',
       size = 'Total emp (1000s)') +
  #fix our ugly legend!
  theme(legend.position = "bottom",
        legend.box = "vertical",
        legend.text = element_text(size = 6),
        legend.title = element_text(size=6),
        plot.margin = unit(c(1,2,1,1), 'cm'))+
  #change order of legends
  guides(size = guide_legend(order=2),
         color = guide_legend(order=1)) +
  #change theme and color of chart
  theme(plot.title = element_text(size=12, color='red', face='italic')) +

  theme_barbie()

```

\[Insert EARN/EPI/CGI example\]?

Mastering these customization techniques will make your plots informative, engaging, and tailored for their intended audience!

## 5. Exporting your plot

<!-- Speaker notes -->

```{=html}
<!--
- So you've created a beautiful ggplot. Now you want to save the image and tweet/blog/print/frame/put it on the refrigerator
-->
```

Now to export your ggplot for the refrigerator

```{r gg export}

final_plot <- ggplot(ind_data2022, 
                     aes(x=union_density, y=real_med_wage, color=mind16, size=(total_emp/1000))) + 
  geom_point() +
  
  #Set our chart labels
  labs(title = 'Relationship between union density and industry median wage, 2022',
       x = 'Union density',
       y = 'Real median wage',
       color= 'Industry',
       size = 'Total emp (1000s)') +
  
  #fix our ugly legend!
  theme(legend.position = "bottom",
        legend.box = "vertical",
        legend.text = element_text(size = 6),
        legend.title = element_text(size=6),
        plot.margin = unit(c(1,2,1,1), 'cm'))+
  
  #change order of legends
  guides(size = guide_legend(order=2),
         color = guide_legend(order=1)) +
  
  #change theme and color of chart
  theme(plot.title = element_text(size=12, color='red', face='italic'))
```
### 5.1 Saving your ggplot

```{r Save options}
# Our chart object
final_plot

ggsave(plot = final_plot,
       #name of our chart
       filename = 'final_union_industry_scatter.png',
       # Save location for our chart
       path = here('output/'), 
       # Dots per inch (300+ is considered high-res)
       dpi = 300)

# ggsave


```


## 6. Advanced Plot Types

### 6.1. Faceting and Multi-panel Plots

<!-- speaker notes -->

```{=html}
<!--
- Faceting is a feature that lets you split one plot into multiple plots based on a factor or category.
- Particularly useful when you want to visualize the relationship between variables across different subgroups of your data.
-->
```

Faceting enables the creation of multi-panel plots, helping visualize patterns across different subgroups without generating individual plots for each subgroup.

Let's view scatter plots of mpg vs. hp but facet them by the number of cylinders:


```{r faceting}

ggplot(mtcars, aes(y=hp, x=mpg))+
  geom_point()+
  facet_wrap(~cyl)

ind_data_years <- ind_data %>% 
  filter(year %in% c(2000, 2008, 2022))

ggplot(ind_data_years, aes(x=union_density, y=real_med_wage)) + 
  geom_point() + 
  facet_wrap(~year) +
  theme_bw()
```


### 6.2. Interactive charts

```{=html}
<!--
- Faceting is a feature that lets you split one plot into multiple plots based on a factor or category.
- Particularly useful when you want to visualize the relationship between variables across different subgroups of your data.
-->
```



Advanced plot types and features will elevate your data visualization skills, allowing you to craft detailed and insightful plots tailored to diverse datasets and questions.

## 7.0 Resources for layer-based chart visualization!

1.  Official Tidyverse page for ggplot2 <https://ggplot2.tidyverse.org/index.html>
2.  Highcharter
