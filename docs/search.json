[
  {
    "objectID": "code/union_density.html",
    "href": "code/union_density.html",
    "title": "Historical state union density",
    "section": "",
    "text": "library(tidyverse)\nlibrary(here)\nlibrary(epiextractr)\n\nLoad CPS data using epiextractr\n\norg &lt;- load_org(1983:2022, year, month, statefips, orgwgt, union, unmem, cow1, age, emp, unemp, lfstat, pubsec, selfemp, selfinc,\n                .extracts_dir = here('data/cps/')) %&gt;%\n  filter(age&gt;=16) %&gt;%\n  #remove self-employed and self-incorporated workers from sample\n  mutate(selfemp0 = ifelse(selfemp==1 & !is.na(selfemp), yes=1, no=0),\n         selfinc0 = ifelse(selfinc==1 & !is.na(selfinc), yes=1, no=0)) %&gt;%\n  filter(selfemp0==0, selfinc0==0)\n\nUsing EPI CPS ORG Extracts, Version 1.0.42\n\n\nCalculate US union density 1983–2022\n\n#US union members and union represented by year, 1983-2022\n\ndensity_us_org &lt;- org %&gt;% \n  group_by(year) %&gt;% \n  summarise(represented_share = weighted.mean(union, w=orgwgt/12, na.rm=TRUE),\n            rep_n = sum(union, na.rm=TRUE),\n            member_share = weighted.mean(unmem, w=orgwgt/12, na.rm=TRUE),\n            memb_n = sum(unmem, na.rm=TRUE),\n            wgt_memb = sum(unmem * orgwgt/12, na.rm=TRUE))\n\ndensity_us_org\n\n# A tibble: 40 × 6\n    year represented_share rep_n member_share memb_n  wgt_memb\n   &lt;int&gt;             &lt;dbl&gt; &lt;int&gt;        &lt;dbl&gt;  &lt;int&gt;     &lt;dbl&gt;\n 1  1983             0.233 39805        0.201  34258 17717379.\n 2  1984             0.216 38008        0.188  32921 17339763.\n 3  1985             0.205 36788        0.180  32185 16996101.\n 4  1986             0.199 35321        0.175  31013 16975180.\n 5  1987             0.192 34505        0.170  30488 16913064.\n 6  1988             0.190 32242        0.168  28406 17001665.\n 7  1989             0.186 32079        0.164  28261 16960452.\n 8  1990             0.182 34110        0.160  29898 16775970.\n 9  1991             0.181 32920        0.160  29051 16611825.\n10  1992             0.177 31725        0.157  28022 16418237.\n# ℹ 30 more rows\n\n\nCalculate state level union representation, 1983–2022\n\n#Union representation by year and state, 1983–Present\ndensity_state_org &lt;- org %&gt;% \nsummarise(represented_share = weighted.mean(union, w=orgwgt/12, na.rm=TRUE),\n          .by = c(year, statefips)) %&gt;%\n  \n  #Turn statefips labels into strings\n  mutate(statefips = haven::as_factor(statefips)) %&gt;% \n  #sort by year and state\n  arrange(year, statefips) %&gt;% \n  #reshape data\n  pivot_wider(id_cols = year, names_from = statefips, values_from = represented_share)\n\ndensity_state_org\n\n# A tibble: 40 × 52\n    year    AL    AK     AZ    AR    CA    CO    CT    DE    DC     FL     GA\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1  1983 0.198 0.293 0.143  0.138 0.259 0.160 0.250 0.221 0.259 0.138  0.153 \n 2  1984 0.179 0.279 0.120  0.120 0.248 0.146 0.222 0.194 0.223 0.127  0.127 \n 3  1985 0.176 0.280 0.120  0.133 0.239 0.137 0.222 0.185 0.212 0.119  0.114 \n 4  1986 0.181 0.268 0.109  0.124 0.231 0.148 0.207 0.190 0.207 0.113  0.117 \n 5  1987 0.155 0.256 0.0822 0.133 0.223 0.138 0.200 0.179 0.199 0.102  0.108 \n 6  1988 0.160 0.268 0.0865 0.117 0.216 0.124 0.205 0.168 0.192 0.107  0.124 \n 7  1989 0.157 0.250 0.0877 0.121 0.219 0.113 0.194 0.172 0.189 0.0993 0.103 \n 8  1990 0.144 0.258 0.0940 0.121 0.209 0.120 0.197 0.168 0.196 0.105  0.0843\n 9  1991 0.155 0.239 0.0981 0.125 0.207 0.117 0.200 0.186 0.190 0.120  0.0882\n10  1992 0.162 0.221 0.0952 0.110 0.209 0.119 0.190 0.184 0.171 0.110  0.0820\n# ℹ 30 more rows\n# ℹ 40 more variables: HI &lt;dbl&gt;, ID &lt;dbl&gt;, IL &lt;dbl&gt;, IN &lt;dbl&gt;, IA &lt;dbl&gt;,\n#   KS &lt;dbl&gt;, KY &lt;dbl&gt;, LA &lt;dbl&gt;, ME &lt;dbl&gt;, MD &lt;dbl&gt;, MA &lt;dbl&gt;, MI &lt;dbl&gt;,\n#   MN &lt;dbl&gt;, MS &lt;dbl&gt;, MO &lt;dbl&gt;, MT &lt;dbl&gt;, NE &lt;dbl&gt;, NV &lt;dbl&gt;, NH &lt;dbl&gt;,\n#   NJ &lt;dbl&gt;, NM &lt;dbl&gt;, NY &lt;dbl&gt;, NC &lt;dbl&gt;, ND &lt;dbl&gt;, OH &lt;dbl&gt;, OK &lt;dbl&gt;,\n#   OR &lt;dbl&gt;, PA &lt;dbl&gt;, RI &lt;dbl&gt;, SC &lt;dbl&gt;, SD &lt;dbl&gt;, TN &lt;dbl&gt;, TX &lt;dbl&gt;,\n#   UT &lt;dbl&gt;, VT &lt;dbl&gt;, VA &lt;dbl&gt;, WA &lt;dbl&gt;, WV &lt;dbl&gt;, WI &lt;dbl&gt;, WY &lt;dbl&gt;\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "code/viz_workshop.html",
    "href": "code/viz_workshop.html",
    "title": "Visualization workshop 2023",
    "section": "",
    "text": "In this workshop you will learn how to create data visualizations using free tools like ggplot2 and Tableau."
  },
  {
    "objectID": "code/viz_workshop.html#welcome-to-the-earncon-2023-visualization-workshop-page",
    "href": "code/viz_workshop.html#welcome-to-the-earncon-2023-visualization-workshop-page",
    "title": "Visualization workshop 2023",
    "section": "",
    "text": "In this workshop you will learn how to create data visualizations using free tools like ggplot2 and Tableau."
  },
  {
    "objectID": "code/viz_workshop.html#introduction",
    "href": "code/viz_workshop.html#introduction",
    "title": "Visualization workshop 2023",
    "section": "1. Introduction",
    "text": "1. Introduction\n\n1.1 Brief Overview of ggplot2\n\n\nggplot2 is a data visualization package for R that allows users to create complex plots in a structured manner. It’s based on the Grammar of Graphics, which provides a coherent system for describing and building graphics.\n\n\n1.2 Philosophy Behind ggplot2\n\n\n\nAt the core of ggplot2 is the idea of layers. This means starting with a blank canvas and then iteratively adding layers to create the desired visualization."
  },
  {
    "objectID": "code/viz_workshop.html#basic-chart-creation",
    "href": "code/viz_workshop.html#basic-chart-creation",
    "title": "Visualization workshop 2023",
    "section": "2. Basic Chart Creation",
    "text": "2. Basic Chart Creation\n\n2.1. Basic Syntax: The big three\n\n\n\nggplot2\naes()\ngeom_point()\n\nThe foundation of any ggplot2 visualization starts with the ggplot() function. Within ggplot(), we call aes() to designate aesthetic mappings, and then append geometries like geom_point() to visually represent data points.\n\n\n2.2. Practical Example\n\n\nUsing the mtcars dataset, we’ll illustrate the relationship between a car’s horsepower (hp) and its fuel efficiency (mpg).\n\n#Load tidyverse library\nlibrary(tidyverse)\n\nmtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\n\nggplot(data=mtcars, aes(x=mpg, y=hp)) +\n  geom_point()\n\n\n\n\n-note: Fix example and tell folks all code will live on code library"
  },
  {
    "objectID": "code/viz_workshop.html#adding-layers-and-customizations",
    "href": "code/viz_workshop.html#adding-layers-and-customizations",
    "title": "Visualization workshop 2023",
    "section": "3. Adding Layers and Customizations",
    "text": "3. Adding Layers and Customizations\n\n3.1. Adding Geometries\n\n\nggplot2 operates on a layered design, allowing users to superimpose multiple layers on a plot. This is achieved by adding various geometries.\nFor instance, apart from scatter plots, you can add lines using geom_line() or view data distributions with geom_histogram().\nA simple line plot using …. [union data] …. [membership] changes over time\n\n# LINE CHART EXAMPLE\n\nAnd a histogram to see the distribution of car mileages (mpg):\n\nggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth=3)\n\n\n\n\n\n\n3.2 Customizing Aesthetics\n\n\nA major advantage of ggplot2 is its flexibility in customizing visual properties, enabling you to enhance both the aesthetics and interpretability of your plots.\nFor instance, modifying the scatter plot by adjusting point properties:\n\nggplot(mtcars, aes(x=mpg, y=hp, color=as.factor(cyl), shape=as.factor(vs), size=wt, alpha=gear)) + \n  geom_point()\n\n\n\n\nHere:\ncolor: Colored by cylinder count (cyl).\nshape: Shaped by whether the car is V/S (vs).\nsize: Sized by the car’s weight (wt).\nalpha: Transparency adjusted by the gear count (gear).\n\n\n3.3 Practical Example\n\n\nAn insightful visualization often arises from combining various layers and customizing aesthetics.\nBuilding on our scatter plot from earlier, let’s include a smoothed line to better discern the relationship between mpg and hp:\n\nggplot(mtcars, aes(x=mpg, y=hp)) + \n  geom_point(aes(color=cyl)) + \n  geom_smooth(method=\"lm\", se=FALSE, color=\"red\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nQuestion: Why would I add aes to geom point vs aes?\nThe geom_smooth() with method=“lm” adds a linear regression line. The se=FALSE ensures the standard error bands are not plotted, and we’ve chosen a distinct red color for the line.\nLayering and customization in ggplot2 ensures your visualizations are both visually appealing and insightful."
  },
  {
    "objectID": "code/viz_workshop.html#customizing-plots-with-themes-and-labels",
    "href": "code/viz_workshop.html#customizing-plots-with-themes-and-labels",
    "title": "Visualization workshop 2023",
    "section": "4. Customizing Plots with Themes and Labels",
    "text": "4. Customizing Plots with Themes and Labels\n\n4.1. Themes in ggplot2\n\n\nggplot2 offers pre-set themes to modify plot aesthetics. Themes are a quick way to change the overall appearance of a plot, ensuring consistency presentations, papers, or reports.\nFor instance, let’s take the scatter plot we’ve been working with and apply a black and white theme:\n[Insert EARN/EPI/CGI example]\n\nggplot(mtcars, aes(x=mpg, y=hp)) + geom_point() + theme_bw()\n\n\n\n\n\n\n4.2. Labeling and Titling\n\n\nLabeling is an integral part of making your plots interpretable. While some labels are inferred directly from the data, you often need to specify or customize them.\nHere’s how to add a title, x-axis label, and y-axis label to our scatter plot:\n\nggplot(mtcars, aes(x=mpg, y=hp)) + \n  geom_point() + \n  labs(\n    title = \"Relationship between MPG and Horsepower\",\n    x = \"Miles Per Gallon (MPG)\",\n    y = \"Horsepower (HP)\",\n    \n  )\n\n\n\n\n\n\n4.3. Adjusting Text Elements\n\n\nText elements such as titles, axis labels, and annotations can be modified to better fit your plot’s aesthetic or to match specific publication requirements.\nHere’s an example of adjusting the title’s size and color:\nNote:\n\nggplot(mtcars, aes(x=mpg, y=hp)) + \n  geom_point() + \n  \n  labs(title = \"Relationship between MPG and Horsepower\") +\n  theme(plot.title = element_text(size=14, color='blue', face = 'italic'))\n\n\n\n# Note: Add some Hex code examples\n\nMastering these customization techniques will make your plots informative, engaging, and tailored for their intended audience!"
  },
  {
    "objectID": "code/viz_workshop.html#advanced-plot-types",
    "href": "code/viz_workshop.html#advanced-plot-types",
    "title": "Visualization workshop 2023",
    "section": "5. Advanced Plot Types",
    "text": "5. Advanced Plot Types\n\n5.1. Faceting and Multi-panel Plots\n\n\n5.2. Interactive charts\n\n\nFaceting enables the creation of multi-panel plots, helping visualize patterns across different subgroups without generating individual plots for each subgroup.\nLet’s view scatter plots of mpg vs. hp but facet them by the number of cylinders:\n\nggplot(mtcars, aes(x=mpg, y=hp)) + \n  geom_point() + \n  facet_wrap(~cyl)\n\n\n\n\nAdvanced plot types and features will elevate your data visualization skills, allowing you to craft detailed and insightful plots tailored to diverse datasets and questions."
  },
  {
    "objectID": "code/viz_workshop.html#resources-for-layer-based-chart-visualization",
    "href": "code/viz_workshop.html#resources-for-layer-based-chart-visualization",
    "title": "Visualization workshop 2023",
    "section": "6.0 Resources for layer-based chart visualization!",
    "text": "6.0 Resources for layer-based chart visualization!"
  },
  {
    "objectID": "code/about.html",
    "href": "code/about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to the EARN code library, a resource dedicated to the pursuit of economic and racial justice.\nThis library is intended to be a hub for generating and sharing research ideas, enhancing data analysis accessibility and transparency, and fostering collaboration.\nOn this site, you will find coding examples, commonly used EPI/EARN methodologies for economic analysis, coding resources, and beyond. Most importantly, user contributions are warmly welcomed!"
  },
  {
    "objectID": "code/about.html#about-this-site",
    "href": "code/about.html#about-this-site",
    "title": "About",
    "section": "",
    "text": "Welcome to the EARN code library, a resource dedicated to the pursuit of economic and racial justice.\nThis library is intended to be a hub for generating and sharing research ideas, enhancing data analysis accessibility and transparency, and fostering collaboration.\nOn this site, you will find coding examples, commonly used EPI/EARN methodologies for economic analysis, coding resources, and beyond. Most importantly, user contributions are warmly welcomed!"
  },
  {
    "objectID": "code/about.html#user-code-submissions",
    "href": "code/about.html#user-code-submissions",
    "title": "About",
    "section": "User code submissions",
    "text": "User code submissions\nHave a coding sample you would like to submit to the EARN code library? Contact dperez@epi.org\nComponents of a code library submission are:\n\nDescription​\nCode file(s)​\nSupplementary data​\nOutput example\nAuthor contact information"
  },
  {
    "objectID": "code/about.html#happy-coding",
    "href": "code/about.html#happy-coding",
    "title": "About",
    "section": "Happy coding!",
    "text": "Happy coding!\n\n\n#This R code generates an interactive scatterplot in the shape of a heart\n\n# Load required libraries\nlibrary(highcharter)\n\n# Generate heart-shaped data\nt &lt;- seq(0, 2 * pi, by = 0.01)\nx &lt;- 16 * sin(t)^3\ny &lt;- 13 * cos(t) - 5 * cos(2 * t) - 2 * cos(3 * t) - cos(4 * t)\n\n# Create a data frame\ndf &lt;- data.frame(x, y)\n\n# Create highcharter plot\nhighchart(type = \"chart\") %&gt;% \n  hc_add_series(data = df, type = \"scatter\", color = \"red\", marker = list(radius = 2)) %&gt;% \n  hc_xAxis(title = list(text = \"Justice\"), min = -20, max = 20) %&gt;% \n  hc_yAxis(title = list(text = \"Peace\"), min = -20, max = 15) %&gt;% \n  hc_chart(backgroundColor = \"transparent\") %&gt;% \n  hc_legend(enabled = FALSE)"
  },
  {
    "objectID": "code/bin_wage_deciles.html",
    "href": "code/bin_wage_deciles.html",
    "title": "Wage deciles by state",
    "section": "",
    "text": "set more off\nclear all\n\n*NOTE: Users will need to create their own directory and relative directories \nglobal base \"/your_directory\"\nglobal code ${base}code/\nglobal output ${base}output/\n\n\n*load_epiextracts is an easy way to load a selection of years and variables \n* of the EPI CPS extracts into memory. First, install the Stata package with\n*See https://microdata.epi.org/basicuse/ for use information.\n\n*net install load_epiextracts, from(\"https://microdata.epi.org/stata\")\n\n* load CPS ORG: wage, wbho\nload_epiextracts, begin(2022m1) end(2022m12) sample(ORG) keep(year month orgwgt age emp selfemp wage statefips)\n\n\ntempfile allthedata\nsave `allthedata'\n\n* define sample\n\nkeep if age&gt;=16\nkeep if emp==1\nkeep if selfemp!=1 & selfemp!=.\n\n\n* Calculate state wage deciles\nuse `allthedata', clear\nbinipolate wage [pw=orgwgt/12], binsize(.50) by(year statefips) collapsefun(gcollapse) p(10 20 30 40 50 60 70 80 90)\n\n*Turn statefips labels into strings\ndecode statefips, gen(states)\ndrop statefips\n\n*Reshape data wide\nreshape wide wage_binned, i(year percentile) j(states) string\n\n*Export state wage deciles to csv file\nexport delim ${output}state_wage_deciles.csv, replace\n\n\n\n Back to top"
  },
  {
    "objectID": "code/stata_binipolate.html",
    "href": "code/stata_binipolate.html",
    "title": "Binipolate for Stata",
    "section": "",
    "text": "Binipolate is a Stata function to bin data and linearly interpolate percentiles. See the binipolate github page for more detail.\n\n\nnet install binipolate, from(\"https://raw.githubusercontent.com/Economic/binipolate/master/\")\n\n\n\nIf you use binipolate, please cite it:\n\nZipperer, Ben and Zane Mokhiber. 2020. binipolate: A Stata function to bin data and linearly interpolate percentiles. https://github.com/Economic/binipolate"
  },
  {
    "objectID": "code/stata_binipolate.html#installation",
    "href": "code/stata_binipolate.html#installation",
    "title": "Binipolate for Stata",
    "section": "",
    "text": "net install binipolate, from(\"https://raw.githubusercontent.com/Economic/binipolate/master/\")"
  },
  {
    "objectID": "code/stata_binipolate.html#citations",
    "href": "code/stata_binipolate.html#citations",
    "title": "Binipolate for Stata",
    "section": "",
    "text": "If you use binipolate, please cite it:\n\nZipperer, Ben and Zane Mokhiber. 2020. binipolate: A Stata function to bin data and linearly interpolate percentiles. https://github.com/Economic/binipolate"
  },
  {
    "objectID": "code/epi_libraries.html",
    "href": "code/epi_libraries.html",
    "title": "EPI libraries for R",
    "section": "",
    "text": "realtalk\nepidatatools\nepiextractr"
  },
  {
    "objectID": "code/epi_libraries.html#how-to-install-epis-data-tools",
    "href": "code/epi_libraries.html#how-to-install-epis-data-tools",
    "title": "EPI libraries for R",
    "section": "How to install EPI’s data tools",
    "text": "How to install EPI’s data tools\nNote! EPI’s R packages require users to install devtools\n\ninstall.packages('devtools')\n\nOnce you’ve installed devtools, you can install all three EPI packages using the following commands\n\ndevtools::install_github(\"Economic/realtalk\")\ndevtools::install_github(\"economic/epidatatools\")\ndevtools::install_github(\"economic/epiextractr\")"
  },
  {
    "objectID": "code/epi_microdata.html",
    "href": "code/epi_microdata.html",
    "title": "R: Using EPI’s CPS Extracts",
    "section": "",
    "text": "Note: Users will need to install epiextractr for this example. Refer to EPI built libraries for installation instructions\n\nlibrary(tidyverse)\nlibrary(epiextractr)\nlibrary(here)\n\n\n# download CPS ORG files  \ndownload_cps( sample = 'org', extracts_dir = here('data/cps'))\n\n# Users can also download CPS Basic (4085.3 MB) and CPS May (38.8 MB) files \n\nwill download the latest EPI CPS ORG extracts in .feather format from https://microdata.epi.org and place them in the directory C:\\data\\cps.\nAfter the data is downloaded, load a selection of CPS data for your analysis:\n\norg &lt;- load_cps(\"org\", 2020:2022, year, orgwgt, wage, age, statefips, wbho, \n         .extracts_dir = here('data/cps/'))\n\norg\n\n# A tibble: 786,123 × 6\n    year orgwgt  wage age       statefips wbho     \n   &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;int+lbl&gt; &lt;int+lbl&gt; &lt;int+lbl&gt;\n 1  2020  8879.  11.2 23        1 [AL]    2 [Black]\n 2  2020  8466.  20   50        1 [AL]    2 [Black]\n 3  2020  5948.  NA   70        1 [AL]    2 [Black]\n 4  2020  6664.  NA   77        1 [AL]    2 [Black]\n 5  2020  7850.  NA   77        1 [AL]    4 [Other]\n 6  2020 10222.  NA   54        1 [AL]    4 [Other]\n 7  2020  7283.  NA   79        1 [AL]    1 [White]\n 8  2020  7483.  NA   76        1 [AL]    1 [White]\n 9  2020  7368.  NA   63        1 [AL]    1 [White]\n10  2020  7022.  NA   80 [80+]  1 [AL]    1 [White]\n# ℹ 786,113 more rows"
  },
  {
    "objectID": "code/inflation_adjusting.html",
    "href": "code/inflation_adjusting.html",
    "title": "R: Inflation adjusting with Realtalk",
    "section": "",
    "text": "Note: Users will need to install realtalk and epiextractr for this example. Refer to EPI built libraries for installation instructions"
  },
  {
    "objectID": "code/inflation_adjusting.html#loading-cpi-indices-using-the-realtalk-library",
    "href": "code/inflation_adjusting.html#loading-cpi-indices-using-the-realtalk-library",
    "title": "R: Inflation adjusting with Realtalk",
    "section": "Loading CPI Indices using the realtalk library",
    "text": "Loading CPI Indices using the realtalk library\nThe following chunk of code loads the R libraries necessary for this exercise. You may need to install them to run this code.\n\n#Load necessary libraries\nlibrary(tidyverse)\nlibrary(realtalk)\nlibrary(epiextractr)\nlibrary(here)\n\nThe RealTalk package includes several datasets of common US price indices. You may view those by executing the available_price_indexes() command.\n\n#list available cpi series\nrealtalk::available_price_indexes\n\n# A tibble: 13 × 6\n   index_name         frequency seasonal min_date max_date package_data_name    \n   &lt;chr&gt;              &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;                \n 1 C-CPI-U            annual    &lt;NA&gt;     2000     2022     c_cpi_u_annual       \n 2 C-CPI-U            monthly   NSA      Dec 1999 May 2023 c_cpi_u_monthly_nsa  \n 3 CPI-U              annual    &lt;NA&gt;     1937     2022     cpi_u_annual         \n 4 CPI-U              monthly   NSA      Jan 1937 May 2023 cpi_u_monthly_nsa    \n 5 CPI-U              monthly   SA       Jan 1947 May 2023 cpi_u_monthly_sa     \n 6 CPI-U-RS           annual    &lt;NA&gt;     1978     2022     cpi_u_rs_annual      \n 7 CPI-U-RS           monthly   NSA      Dec 1977 Dec 2022 cpi_u_rs_monthly_nsa \n 8 CPI-U-RS, extended annual    &lt;NA&gt;     1937     2022     cpi_u_rs_extended_an…\n 9 CPI-U-RS, extended monthly   NSA      Jan 1937 May 2023 cpi_u_rs_extended_mo…\n10 CPI-U-X1           annual    &lt;NA&gt;     1967     1982     cpi_u_x1_annual      \n11 CPI-U-X1           monthly   NSA      Jan 1967 Dec 1982 cpi_u_x1_monthly_nsa \n12 PCE                annual    &lt;NA&gt;     1929     2022     pce_annual           \n13 PCE                monthly   SA       Jan 1959 Apr 2023 pce_monthly_sa       \n\n\nEPI uses the CPI-U-RS series to inflation adjust wages, so we’ll select that series and assign it to a dataframe.\n\n#this creates a dataframe with the annual CPI-U-RS index from 1937-2022\ncpi_data &lt;- realtalk::cpi_u_rs_annual\n\n#Set base year to 2022\ncpi2022 &lt;- cpi_data$cpi_u_rs[cpi_data$year==2022]"
  },
  {
    "objectID": "code/inflation_adjusting.html#a-refresher-on-inflation-adjustment",
    "href": "code/inflation_adjusting.html#a-refresher-on-inflation-adjustment",
    "title": "R: Inflation adjusting with Realtalk",
    "section": "A refresher on inflation adjustment",
    "text": "A refresher on inflation adjustment\nBefore jumping into the full code. Let’s refresh on how to calculate inflation using the Consumer Price Index.\nInflation in a given year is calculated by dividing the price of a market basket in a particular year by the price of the same basket in the base year, like so:\n\\[\n\\frac{\\text{Given year}}{\\text{Base year}} * 100\n\\]\nFor example, let’s calculate how much the CPI-U-RS index has increased from 1978 to 2022.\n\\[\n\\frac{\\text{CPI}_{2022}}{\\text{CPI}_{1978}} = \\frac{431.5}{104} \\approx 4.149038 \\text{ or } 414.9\\%\n\\]\nAnd voila - we see that inflation has caused the basket of goods to increase 414.9% since 1978."
  },
  {
    "objectID": "code/inflation_adjusting.html#applying-inflation-adjustment-to-cps-org-wage-data",
    "href": "code/inflation_adjusting.html#applying-inflation-adjustment-to-cps-org-wage-data",
    "title": "R: Inflation adjusting with Realtalk",
    "section": "Applying inflation adjustment to CPS ORG wage data",
    "text": "Applying inflation adjustment to CPS ORG wage data\nThis section uses epiextractr to load Current Population Survey data. Refer to the Using EPI’s CPS Extracts to learn how to use this library.\nBelow, I load CPS ORG data and define my sample:\n\norg &lt;- load_org(2012:2022, year, month, orgwgt, wage, age, lfstat,\n         .extracts_dir = here('data/cps/')) %&gt;% \n    #define sample universe\n    filter(age&gt;=16, lfstat %in% c(1,2))\n\nNext, calculate median wages in the CPS. and merge the annual CPI index to the dataframe using left_join()\n\n#Calculate median wages in the CPS ORG\nwage_data &lt;- org %&gt;% \n  #use spatstat package to calculate a weighted median\n  #Note: I am pooling 12 months of CPS data, \n  #so I adjust orgwgt—the survey weight— variable, dividing it by 12.\n  summarize(nominal_median_wage = \n              spatstat.geom::weighted.median(wage, w=orgwgt/12, na.rm=TRUE),\n            .by=year) %&gt;% \n\n#Merge annual CPI data to dataframe by year.\n  left_join(cpi_data, by='year') \n\nwage_data\n\n# A tibble: 11 × 3\n    year nominal_median_wage cpi_u_rs\n   &lt;dbl&gt;               &lt;dbl&gt;    &lt;dbl&gt;\n 1  2012                16.0     337.\n 2  2013                16.4     342 \n 3  2014                16.7     348.\n 4  2015                17.0     348.\n 5  2016                17.5     353.\n 6  2017                18.0     360.\n 7  2018                18.7     369.\n 8  2019                19.2     376.\n 9  2020                21.0     381.\n10  2021                21.4     399.\n11  2022                22.9     432.\n\n\nFinally, calculate the inflation rate relative to 2022, and the inflation adjusted median wage using the CPI index as follows:\n\nadjusted_data &lt;- wage_data %&gt;% \n \n  #This mutate command calculates inflation in a given year, relative to 2022\n  #and multiplies nominal median wages by the inflation quotient\n  mutate(infl_rel_to_2022 = signif(x = ((cpi2022/cpi_u_rs)-1), digits=2),\n         real_wage_2022 = nominal_median_wage*(cpi2022/cpi_u_rs)) %&gt;% \n  \n  relocate(infl_rel_to_2022, nominal_median_wage, .after=cpi_u_rs)\n  \nadjusted_data\n\n# A tibble: 11 × 5\n    year cpi_u_rs infl_rel_to_2022 nominal_median_wage real_wage_2022\n   &lt;dbl&gt;    &lt;dbl&gt;            &lt;dbl&gt;               &lt;dbl&gt;          &lt;dbl&gt;\n 1  2012     337.            0.28                 16.0           20.5\n 2  2013     342             0.26                 16.4           20.7\n 3  2014     348.            0.24                 16.7           20.8\n 4  2015     348.            0.24                 17.0           21.1\n 5  2016     353.            0.22                 17.5           21.4\n 6  2017     360.            0.2                  18.0           21.6\n 7  2018     369.            0.17                 18.7           21.9\n 8  2019     376.            0.15                 19.2           22.1\n 9  2020     381.            0.13                 21.0           23.8\n10  2021     399.            0.081                21.4           23.1\n11  2022     432.            0                    22.9           22.9"
  }
]